services:
  # Development environment services
  app_dev:
    profiles: [ "dev" ]
    container_name: insight_erp_dev
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: development
    volumes:
      - ./src:/app/src
    env_file:
      - .env.development
    command: >
      sh -c "
        npx prisma migrate dev &&
        npx prisma generate &&
        npm run seed &&
        npm run dev
      "
    depends_on:
      postgres_dev:
        condition: service_healthy  # <-- Wait until Postgres is healthy!!
      redis_dev:
        condition: service_started
    networks:
      - insight_erp_dev_network
    ports:
      - "3000:3000"

  postgres_dev:
    profiles: [ "dev" ]
    container_name: postgres_dev
    image: postgres:13-alpine
    env_file:
      - .env.development
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - insight_erp_dev_network
    ports:
      - "5432:5432"
    # Ensure Postgres is truly ready
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis_dev:
    profiles: [ "dev" ]
    container_name: redis_dev
    image: redis:6-alpine
    networks:
      - insight_erp_dev_network
    ports:
      - "6379:6379"

  # Production environment services
  app_prod:
    profiles: [ "prod" ]
    container_name: insight_erp_prod
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    environment:
      NODE_ENV: production
      DB_HOST: postgres_prod
      DB_PORT: 5432
      DB_USER: myapp_user
      DB_NAME: myapp_db
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_prod_password
    secrets:
      - postgres_prod_password
    command: sh -c "npx prisma migrate deploy && npm run start"
    depends_on:
      - postgres_prod
      - redis_prod
    networks:
      - insight_erp_prod_network
    ports:
      - "3000:3000"

  postgres_prod:
    profiles: [ "prod" ]
    container_name: postgres_prod
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: myapp_user
      POSTGRES_DB: myapp_db
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_prod_password
    secrets:
      - postgres_prod_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - insight_erp_prod_network

  redis_prod:
    profiles: [ "prod" ]
    container_name: redis_prod
    image: redis:6-alpine
    networks:
      - insight_erp_prod_network

networks:
  insight_erp_dev_network:
    name: insight_erp_dev_network
  insight_erp_prod_network:
    name: insight_erp_prod_network

volumes:
  postgres_dev_data:
  postgres_prod_data:

secrets:
  postgres_prod_password:
    file: ./secrets/postgres_prod_password.txt
