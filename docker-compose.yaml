services:
  # Development environment services
  app_dev:
    profiles: [ "dev" ]
    container_name: insight_erp_dev
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: development # Build argument to install dev dependencies
    volumes:
      - ./src:/app/src # Mount source code for live reload in development
    env_file:
      - .env.development # Load environment variables from a .env file (development)
    command: sh -c "npx prisma migrate dev && npm run dev"
    # ^ On startup, apply Prisma migrations (development mode) then start Nodemon dev server
    depends_on:
      - postgres_dev
      - redis_dev
    networks:
      - insight_erp_dev_network
    ports:
      - "3000:3000" # (Optional) expose app port for local access

  postgres_dev:
    profiles: [ "dev" ]
    container_name: postgres_dev
    image: postgres:13-alpine
    env_file:
      - .env.development # Use .env for POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB in dev
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data # Persist database data (development)
    networks:
      - insight_erp_dev_network
    ports:
      - "5432:5432" # (Optional) expose PostgreSQL port for local dev access

  redis_dev:
    profiles: [ "dev" ]
    container_name: redis_dev
    image: redis:6-alpine
    networks:
      - insight_erp_dev_network
    ports:
      - "6379:6379" # (Optional) expose Redis port for local dev debugging

  # Production environment services
  app_prod:
    profiles: [ "prod" ]
    container_name: insight_erp_prod
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production # Build argument to install only prod dependencies and compile TS
    # In production, sensitive values are provided via Docker secrets (see the secrets section below)
    environment:
      # Non-sensitive env vars (examples):
      NODE_ENV: production
      DB_HOST: postgres_prod
      DB_PORT: 5432
      DB_USER: myapp_user
      DB_NAME: myapp_db
      # Use Docker secret for the database password
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_prod_password
      # (The app can construct or use this for the DB connection string)
      # e.g., Prisma can use DATABASE_URL that includes the password from secret
    secrets:
      - postgres_prod_password # Docker Swarm secret for the DB password
    command: sh -c "npx prisma migrate deploy && npm run start"
    # ^ On startup, run Prisma migrations (production mode) then start the Node app
    depends_on:
      - postgres_prod
      - redis_prod
    networks:
      - insight_erp_prod_network
    ports:
      - "3000:3000" # (Optional) expose app port (e.g., behind a reverse proxy in prod)

  postgres_prod:
    profiles: [ "prod" ]
    container_name: postgres_prod
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: myapp_user
      POSTGRES_DB: myapp_db
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_prod_password # Use Docker secret for password
    secrets:
      - postgres_prod_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data # Persist database data (production)
    networks:
      - insight_erp_prod_network
    # (Ports not exposed publicly in production for security, accessible only within network)

  redis_prod:
    profiles: [ "prod" ]
    container_name: redis_prod
    image: redis:6-alpine
    networks:
      - insight_erp_prod_network
    # (No ports exposed; used only by app within the Docker network)

    # Define separate Docker networks for isolation of dev and prod environments
networks:
  insight_erp_dev_network:
    name: insight_erp_dev_network
  insight_erp_prod_network:
    name: insight_erp_prod_network

# Define volumes for persistent storage of PostgreSQL data
volumes:
  postgres_dev_data:
  postgres_prod_data:

    # Define Docker secrets for sensitive data (used in production services)
secrets:
  postgres_prod_password:
    file: ./secrets/postgres_prod_password.txt # This file should contain the DB password for production
